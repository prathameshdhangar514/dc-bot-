# AP I Health monitoring
@tasks.loop(minutes=5)
async def api_health_monitor():
    """Monitor API usage and rate limiting status"""
    try:
        now = time.time()

        # Clean old API call records
        global discord_api_calls
        discord_api_calls = [
            call_time for call_time in discord_api_calls
            if now - call_time < API_WINDOW
        ]

        # IMPROVED CLEANUP - Add size limits
        for user_id in list(user_command_cooldowns.keys()):
            user_commands = user_command_cooldowns[user_id]

            # Remove expired cooldowns
            for command in list(user_commands.keys()):
                if now - user_commands[command] > 86400:  # 24 hours
                    del user_commands[command]

            # Remove empty user records
            if not user_commands:
                del user_command_cooldowns[user_id]

        # CRITICAL: Prevent memory explosion - limit total entries
        if len(user_command_cooldowns) > 10000:  # Safety limit
            logger.warning(
                "‚ö†Ô∏è Cooldown dictionary too large, clearing old entries")
            # Keep only the 1000 most recent entries
            sorted_users = sorted(user_command_cooldowns.items(),
                                  key=lambda x: max(x[1].values())
                                  if x[1] else 0,
                                  reverse=True)
            user_command_cooldowns.clear()
            user_command_cooldowns.update(dict(sorted_users[:1000]))

    except Exception as e:
        logger.error(f"‚ùå API health monitor error: {e}")


async def main():
    """Main async function with proper startup sequence and error recovery"""
    logger.info("üöÄ Starting Discord Bot...")

    # Check if TOKEN is valid before proceeding
    if not TOKEN:
        logger.critical("‚ùå DISCORD_BOT_TOKEN not set in environment variables")
        logger.critical(
            "Please set your Discord bot token in the environment variables")
        return

    max_connection_retries = 5
    retry_delay = 10  # seconds

    for attempt in range(max_connection_retries):
        try:
            # Test connection first
            logger.info(
                f"üîç Testing connection (attempt {attempt + 1}/{max_connection_retries})..."
            )
            if not await test_bot_connection():
                logger.error("‚ùå Bot token validation failed")
                if attempt < max_connection_retries - 1:
                    logger.info(f"‚è≥ Retrying in {retry_delay} seconds...")
                    await asyncio.sleep(retry_delay)
                    continue
                else:
                    return

            # Create startup backup
            await startup_backup()

            # Start the bot
            logger.info("ü§ñ Starting Discord bot connection...")
            await bot.start(TOKEN)
            break  # If we get here, bot started successfully

        except discord.LoginFailure:
            logger.error("‚ùå Invalid bot token")
            break

        except discord.HTTPException as e:
            logger.error(f"‚ùå Discord HTTP error: {e}")
            if attempt < max_connection_retries - 1:
                logger.info(f"‚è≥ Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # Exponential backoff
            else:
                logger.error("‚ùå Max retries exceeded")

        except KeyboardInterrupt:
            logger.info("üõë Keyboard interrupt received")
            break

        except Exception as e:
            logger.error(f"‚ùå Unexpected bot error: {e}")
            if attempt < max_connection_retries - 1:
                logger.info(f"‚è≥ Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error("‚ùå Max retries exceeded")

    # Cleanup
    try:
        if not bot.is_closed():
            logger.info("üõë Closing bot connection...")
            await bot.close()
    except Exception as e:
        logger.error(f"‚ùå Error during cleanup: {e}")

    logger.info("üõë Bot shutdown complete")