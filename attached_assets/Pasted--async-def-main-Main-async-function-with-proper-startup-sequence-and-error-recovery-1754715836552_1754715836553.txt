    async def main():
        """Main async function with proper startup sequence and error recovery"""
        logger.info("üöÄ Starting Discord Bot...")
        # Check if TOKEN is valid before proceeding
        if not TOKEN:
            logger.critical("‚ùå DISCORD_BOT_TOKEN not set in environment variables")
            logger.critical(
                "Please set your Discord bot token in the environment variables")
            return
        max_connection_retries = 5
        retry_delay = 10  # seconds
        for attempt in range(max_connection_retries):
            try:
                # Test connection first
                logger.info(
                    f"üîç Testing connection (attempt {attempt + 1}/{max_connection_retries})..."
                )
                if not await test_bot_connection():
                    logger.error("‚ùå Bot token validation failed")
                    if attempt < max_connection_retries - 1:
                        logger.info(f"‚è≥ Retrying in {retry_delay} seconds...")
                        await asyncio.sleep(retry_delay)
                        continue
                    else:
                        return
                # Create startup backup
                await startup_backup()
                # Start the bot
                logger.info("ü§ñ Starting Discord bot connection...")
                await bot.start(TOKEN)
                break  # If we get here, bot started successfully

        except discord.LoginFailure:
            logger.error("‚ùå Invalid bot token")
            break

        except discord.HTTPException as e:
            logger.error(f"‚ùå Discord HTTP error: {e}")
            if attempt < max_connection_retries - 1:
                logger.info(f"‚è≥ Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # Exponential backoff
            else:
                logger.error("‚ùå Max retries exceeded")

        except KeyboardInterrupt:
            logger.info("üõë Keyboard interrupt received")
            break

        except Exception as e:
            logger.error(f"‚ùå Unexpected bot error: {e}")
            if attempt < max_connection_retries - 1:
                logger.info(f"‚è≥ Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error("‚ùå Max retries exceeded")

    # Cleanup
    try:
        if not bot.is_closed():
            logger.info("üõë Closing bot connection...")
            await bot.close()
    except Exception as e:
        logger.error(f"‚ùå Error during cleanup: {e}")

    logger.info("üõë Bot shutdown complete")